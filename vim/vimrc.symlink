" Disable arrows in normal mode
nnoremap <expr> <Up> ((bufname("%") is "[Command Line]")?("\<Up>"):(""))
nnoremap <expr> <Down> ((bufname("%") is "[Command Line]")?("\<Down>"):(""))
nnoremap <expr> <Left> ((bufname("%") is "[Command Line]")?("\<Left>"):(""))
nnoremap <expr> <Right> ((bufname("%") is "[Command Line]")?("\<Right>"):(""))
set wildmode=longest,list,full
set wildmenu

" Vim-Plug
call plug#begin('~/.vim/plugged')

" Sensible config
Plug 'tpope/vim-sensible'

" GIT changes
Plug 'airblade/vim-gitgutter'

" GIT plugin
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'

" Fuzzy finding
Plug 'junegunn/fzf.vim'

" Many language highlighters
Plug 'sheerun/vim-polyglot'

" Async linting
Plug 'w0rp/ale'

" Like powerline and airline, but lighter
Plug 'itchyny/lightline.vim'

" Awesome colors
Plug 'lifepillar/vim-solarized8'

" PCGen Data file support
Plug 'PCGen/vim-pcgen'

" A tree-style browser
Plug 'scrooloose/nerdtree'

" Reflow rst tables
Plug 'nvie/vim-rst-tables'

" GoLang support
Plug 'fatih/vim-go'

" LaTex
Plug 'vim-latex/vim-latex'

" Completion
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
Plug 'zchee/deoplete-clang'
Plug 'zchee/deoplete-go'

" YANG
Plug 'nathanalderson/yang.vim'

call plug#end()

set listchars=tab:»˙,trail:•,extends:>,precedes:<,nbsp:+
set showbreak=↳
set breakindent
set relativenumber
set number
set ts=8
set sw=2
set expandtab
set colorcolumn=81
set list
set hls

" Go is special...
autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4 softtabstop=4

" Disable polyglot LaTeX highlighting
let g:polyglot_disabled = ['latex']

" for any plugins that use this, make their keymappings use comma
" <Leader> is now comma
let mapleader = ","
let maplocalleader = ","

" An ag command that follows symlinks
command! -nargs=* -bang AgL call fzf#vim#ag(<q-args>, '--follow -U', <bang>0)

" Map ',' plus t or r to fzf for files and tags
nmap ; :Buffers<CR>
nmap <Leader>t :Files<CR>
nmap <Leader>r :Tags<CR>
nmap <Leader>a :AgL<space>
nmap <Leader>A :AgL<CR>

" ALE
let g:ale_sign_warning = '▲'
let g:ale_sign_error = '✗'
"let g:ale_cpp_clangcheck_options = '-extra-arg="-std=c++11"'
let g:ale_cpp_clangtidy_options = '-std=c++11'
highlight link ALEWarningSign String
highlight link ALEErrorSign Title

" GitGutter
let g:gitgutter_sign_added = '∙'
let g:gitgutter_sign_modified = '∙'
let g:gitgutter_sign_removed = '∙'
let g:gitgutter_sign_modified_removed = '∙'

" NERDTree
autocmd StdinReadPre * let s:std_in=1
" Automatically open when no files are specified
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" Open when a directory is added
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
" Open the NERDTree with CTRL+n
map <C-n> :NERDTreeToggle<CR>
" Close vim when the only thing left is NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Colors and shit yo!
set termguicolors
set bg=dark
" let g:solarized_termcolors=256
colorscheme solarized8_flat

" deoplete
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_smart_case = 1

let g:deoplete#sources#clang#libclang_path = "/usr/lib/libclang.so"
let g:deoplete#sources#clang#clang_header = "/lib/clang/"
let g:deoplete#sources#clang#std = { 'cpp': 'c++11' }

let g:deoplete#sources#go#gocode_binary = "/usr/bin/gocode"

" Disable the candidates in Comment/String syntaxes.
call deoplete#custom#source('_', 'disabled_syntaxes', ['Comment', 'String'])

set noshowmode

let g:lightline = {
  \ 'colorscheme': 'solarized',
  \ 'active': {
  \   'left': [ ['mode', 'paste'],
  \             ['fugitive'],
  \             [ 'filename', 'modified' ]
  \           ],
  \   'right': [['lineinfo'],
  \             ['percent'],
  \             ['readonly', 'fileformat', 'fileencoding', 'filetype'],
  \             ['linter_warnings', 'linter_errors', 'linter_ok'],
  \             ]
  \ },
  \ 'component_function': {
  \   'fugitive': 'MyFugitive',
  \   'filename': 'MyFilename',
  \   'readonly': 'MyReadonly',
  \ },
  \ 'component_expand': {
  \   'linter_warnings': 'LightlineLinterWarnings',
  \   'linter_errors': 'LightlineLinterErrors',
  \   'linter_ok': 'LightlineLinterOK',
  \ },
  \ 'component_type': {
  \   'readonly': 'error',
  \   'linter_warnings': 'warning',
  \   'linter_errors': 'error'
  \ },
\ }


function! MyFugitive()
  if exists("*fugitive#head")
    let _ = fugitive#head()
    return strlen(_) ? "\ue0a0"._ : ''
  endif
  return ''
endfunction

function! MyReadonly()
  if &filetype == "help"
    return ""
  elseif &readonly
    return "\ue0a2"
  else
    return ""
  endif
endfunction

function! MyFilename()
  return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
       \ ('' != expand('%') ? expand('%') : '[NoName]')
endfunction

function! LightlineLinterWarnings() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ◆', all_non_errors)
endfunction

function! LightlineLinterErrors() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ✗', all_errors)
endfunction

function! LightlineLinterOK() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '✓ ' : ''
endfunction

autocmd User ALELint call s:MaybeUpdateLightline()

" Update and show lightline but only if it's visible (e.g., not in Goyo)
function! s:MaybeUpdateLightline()
  if exists('#lightline')
    call lightline#update()
  end
endfunction

" files in playbooks/ are ansible
au BufRead,BufNewFile */playbooks/*.yml set filetype=ansible

" set .md files as markdown
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

" Align on leader+backslash
au FileType markdown vmap <Leader><Bslash> :EasyAlign*<Bar><Enter>
